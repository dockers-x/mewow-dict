name: ci

on:
  push:
    tags:
      - "v*"
  pull_request:
  workflow_dispatch:

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/mewow-dict

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.toml') }}
      - run: rustup update stable
      - run: rustup default stable
      - run: cargo test

  release:
    name: Cross build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write  # Explicitly set write permission for releases
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            exe: mewow-dict
            cross: false

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            exe: mewow-dict
            cross: true

          - os: ubuntu-latest
            target: arm-unknown-linux-musleabi
            exe: mewow-dict
            cross: true

          - os: ubuntu-latest
            target: arm-unknown-linux-musleabihf
            exe: mewow-dict
            cross: true

          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            exe: mewow-dict
            cross: true

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            exe: mewow-dict.exe
            cross: false

          - os: macos-latest
            target: x86_64-apple-darwin
            exe: mewow-dict
            cross: false

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # Since rust 1.72, some platforms are tier 3
          toolchain: 1.86.0
          default: true

      - name: Install OpenSSL
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install pkg-config libssl-dev
      - name: Install OpenSSL
        if: matrix.os == 'macos-latest'
        run: brew install openssl@3

      # Native build
      - name: Install target
        if: matrix.cross == false
        run: rustup target add ${{ matrix.target }}
      - name: Run tests
        if: matrix.cross == false
        run: cargo test --release --target ${{ matrix.target }} --verbose
      - name: Build release
        if: matrix.cross == false
        run: cargo build --release --target ${{ matrix.target }}

      # Cross build
      - name: Install cross
        if: matrix.cross
        run: cargo install --version 0.2.5 cross
      - name: Run tests
        if: matrix.cross
        run: cross test --release --target ${{ matrix.target }} --verbose  --no-default-features
      - name: Build release
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }}  --no-default-features

      - name: Run UPX
        # Upx may not support some platforms. Ignore the errors
        continue-on-error: true
        # Disable upx for mips. See https://github.com/upx/upx/issues/387
        if: matrix.os == 'ubuntu-latest' && !contains(matrix.target, 'mips')
        uses: crazy-max/ghaction-upx@v1
        with:
          version: v4.0.2
          files: target/${{ matrix.target }}/release/${{ matrix.exe }}
          args: -q --best --lzma

      - uses: actions/upload-artifact@v4
        with:
          name: mewow-dict-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/${{ matrix.exe }}

      # Copy resources to target directory
      - name: Copy resources to target directory
        run: |
          mkdir -p target/${{ matrix.target }}/release/resources/
          cp -r resources/* target/${{ matrix.target }}/release/resources/

      - name: Zip Release
        uses: TheDoctor0/zip-release@0.7.5
        with:
          type: zip
          filename: mewow-dict-${{ matrix.target }}.zip
          directory: target/${{ matrix.target }}/release/
          path: ${{ matrix.exe }} resources/

      - name: Publish
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: target/${{ matrix.target }}/release/mewow-dict-${{ matrix.target }}.zip
          generate_release_notes: true
          draft: true
          token: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Pull LFS files
        run: |
          git lfs install
          git lfs pull

      - name: List repository contents for debugging
        run: |
          ls -la
          echo "Checking for dictionary files:"
          ls -la resources/mdx || echo "Dictionary directory not found"
          du -sh resources/mdx/* || echo "No dictionary files found"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # 移除 driver: docker 配置，使用默认的 BuildKit driver

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          provenance: false
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            GIT_LFS_SKIP_SMUDGE=0

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform }}
          path: /tmp/digests/*
          if-no-files-found: warn
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name != 'pull_request' && false # Disable this job for now
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}

  finalize-release:
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref_type == 'tag'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}